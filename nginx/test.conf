user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    upstream app_server {
      # fail_timeout=0 means we always retry an upstream even if it failed
      # to return a good HTTP response
      server app1:8000 fail_timeout=0;
    }
    
    server {
      # use 'listen 80 deferred;' for Linux
      listen 80 default_server;
      client_max_body_size 4G;
      
      # Nginx behind load balancer so no server_name defined and defaulting to empty name as server name.
      # http://nginx.org/en/docs/http/server_names.html
      # server_name example.com www.example.com;
      
      keepalive_timeout 5;
      
      root /usr/share/nginx/public;
      
      location / {
        # http://nginx.org/en/docs/http/ngx_http_core_module.html#location
        # http://nginx.org/en/docs/http/ngx_http_core_module.html#try_files
        # Checks for static file, if not found proxy to app.
        # No need to worry with directory names such as static or media.
        try_files $uri @proxy_to_app;
      }
      
      location @proxy_to_app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        proxy_pass http://app_server;
        if ( $request ~* "/app-check/" ) {
          access_log off;
        }
        # https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;";
      }
      
      error_page 500 502 503 504 /500.html;
      #location = /500.html {
      #  root /usr/share/nginx/public;
      #}
    }
}